# Generated by Django 2.2.12 on 2020-05-27 21:56

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.indexes
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import imagekit.models.fields
import users.helpers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_email_verified', models.BooleanField(default=False, verbose_name='Почта подтверждена')),
                ('is_phone_verified', models.BooleanField(default=False, verbose_name='Телефон подтвержден')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='uuid')),
                ('last_activity', models.DateTimeField(auto_now_add=True, verbose_name='Активность')),
                ('phone', models.CharField(blank=True, max_length=17, unique=True, verbose_name='Телефон')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Пользователь удален')),
                ('is_blocked', models.BooleanField(default=False, verbose_name='Пользователь заблокирован')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'пользователи',
                'verbose_name': 'пользователь',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blocked_user', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='blocked_by_users', to=settings.AUTH_USER_MODEL, verbose_name='Кого блокирует')),
                ('blocker', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='user_blocks', to=settings.AUTH_USER_MODEL, verbose_name='Кто блокирует')),
            ],
        ),
        migrations.CreateModel(
            name='TwoUserLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city_ru', models.CharField(blank=True, max_length=100, verbose_name='Город по-русски')),
                ('city_en', models.CharField(blank=True, max_length=100, verbose_name='Город по-английски')),
                ('city_lat', models.FloatField(blank=True, null=True, verbose_name='Ширина города')),
                ('city_lon', models.FloatField(blank=True, null=True, verbose_name='Долгота города')),
                ('region_ru', models.CharField(blank=True, max_length=100, verbose_name='Регион по-русски')),
                ('region_en', models.CharField(blank=True, max_length=100, verbose_name='Регион по-английски')),
                ('country_ru', models.CharField(blank=True, max_length=100, verbose_name='Страна по-русски')),
                ('country_en', models.CharField(blank=True, max_length=100, verbose_name='Страна по-английски')),
                ('phone', models.CharField(blank=True, max_length=5, verbose_name='Начало номера')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_location_2', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name_plural': 'Местоположения 2',
                'verbose_name': 'Местоположение 2',
            },
        ),
        migrations.CreateModel(
            name='ThreeUserLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city_ru', models.CharField(blank=True, max_length=100, verbose_name='Город по-русски')),
                ('city_en', models.CharField(blank=True, max_length=100, verbose_name='Город по-английски')),
                ('city_lat', models.FloatField(blank=True, null=True, verbose_name='Ширина города')),
                ('city_lon', models.FloatField(blank=True, null=True, verbose_name='Долгота города')),
                ('region_ru', models.CharField(blank=True, max_length=100, verbose_name='Регион по-русски')),
                ('region_en', models.CharField(blank=True, max_length=100, verbose_name='Регион по-английски')),
                ('country_ru', models.CharField(blank=True, max_length=100, verbose_name='Страна по-русски')),
                ('country_en', models.CharField(blank=True, max_length=100, verbose_name='Страна по-английски')),
                ('phone', models.CharField(blank=True, max_length=5, verbose_name='Начало номера')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_location_3', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name_plural': 'Местоположения 3',
                'verbose_name': 'Местоположение 3',
            },
        ),
        migrations.CreateModel(
            name='Subscribe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата добавления')),
                ('added_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='added_user', to=settings.AUTH_USER_MODEL, verbose_name='На кого подписался')),
                ('adding_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='adding_user', to=settings.AUTH_USER_MODEL, verbose_name='Кто подписался')),
            ],
            options={
                'verbose_name_plural': 'Подписки',
                'verbose_name': 'Подписки',
            },
        ),
        migrations.CreateModel(
            name='OneUserLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city_ru', models.CharField(blank=True, max_length=100, verbose_name='Город по-русски')),
                ('city_en', models.CharField(blank=True, max_length=100, verbose_name='Город по-английски')),
                ('city_lat', models.FloatField(blank=True, null=True, verbose_name='Ширина города')),
                ('city_lon', models.FloatField(blank=True, null=True, verbose_name='Долгота города')),
                ('region_ru', models.CharField(blank=True, max_length=100, verbose_name='Регион по-русски')),
                ('region_en', models.CharField(blank=True, max_length=100, verbose_name='Регион по-английски')),
                ('country_ru', models.CharField(blank=True, max_length=100, verbose_name='Страна по-русски')),
                ('country_en', models.CharField(blank=True, max_length=100, verbose_name='Страна по-английски')),
                ('phone', models.CharField(blank=True, max_length=5, verbose_name='Начало номера')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_location', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name_plural': 'Местоположения 1',
                'verbose_name': 'Местоположение 1',
            },
        ),
        migrations.CreateModel(
            name='IPUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_1', models.GenericIPAddressField(blank=True, null=True, verbose_name='ip 1')),
                ('ip_2', models.GenericIPAddressField(blank=True, null=True, verbose_name='ip 2')),
                ('ip_3', models.GenericIPAddressField(blank=True, null=True, verbose_name='ip 3')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_ip', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name_plural': 'ip пользователей',
                'verbose_name': 'ip пользователя',
            },
        ),
        migrations.CreateModel(
            name='Guest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Что понравилось / не понравилось')),
                ('message', models.CharField(max_length=1000, verbose_name='Сообщение')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата добавления')),
                ('star', models.CharField(choices=[('1', 'Очень плохо'), ('2', 'Плохо'), ('3', 'Нормально'), ('4', 'Хорошо'), ('5', 'Отлично')], max_length=50, verbose_name='Рейтинг')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='guest_receiver', to=settings.AUTH_USER_MODEL, verbose_name='Кому написал')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='guest_sender', to=settings.AUTH_USER_MODEL, verbose_name='Кто написал')),
            ],
            options={
                'verbose_name_plural': 'Отзывы на пользователя',
                'verbose_name': 'Отзыв на пользователя',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('bio', models.TextField(blank=True, max_length=1000, verbose_name='Биография')),
                ('сity', models.CharField(blank=True, max_length=100, verbose_name='Город')),
                ('status', models.CharField(blank=True, max_length=100, verbose_name='статус-слоган')),
                ('vk_url', models.URLField(blank=True, verbose_name='Ссылка на vk')),
                ('youtube_url', models.URLField(blank=True, verbose_name='Ссылка на youtube')),
                ('facebook_url', models.URLField(blank=True, verbose_name='Ссылка на facebook')),
                ('instagram_url', models.URLField(blank=True, verbose_name='Ссылка на instagram')),
                ('twitter_url', models.URLField(blank=True, verbose_name='Ссылка на twitter')),
                ('avatar', imagekit.models.fields.ProcessedImageField(upload_to=users.helpers.upload_to_user_directory)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'index_together': {('id', 'user')},
                'verbose_name_plural': 'Профили пользователей',
                'verbose_name': 'Профиль пользователя',
            },
        ),
        migrations.AddIndex(
            model_name='userblock',
            index=models.Index(fields=['blocked_user', 'blocker'], name='users_userb_blocked_ab1a4e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userblock',
            unique_together={('blocked_user', 'blocker')},
        ),
        migrations.AlterIndexTogether(
            name='twouserlocation',
            index_together={('id', 'user')},
        ),
        migrations.AlterIndexTogether(
            name='threeuserlocation',
            index_together={('id', 'user')},
        ),
        migrations.AddIndex(
            model_name='subscribe',
            index=django.contrib.postgres.indexes.BrinIndex(fields=['created'], name='users_subsc_created_638c8c_brin'),
        ),
        migrations.AlterUniqueTogether(
            name='subscribe',
            unique_together={('adding_user', 'added_user')},
        ),
        migrations.AlterIndexTogether(
            name='oneuserlocation',
            index_together={('id', 'user')},
        ),
        migrations.AlterIndexTogether(
            name='ipuser',
            index_together={('id', 'user')},
        ),
        migrations.AddIndex(
            model_name='guest',
            index=django.contrib.postgres.indexes.BrinIndex(fields=['created'], name='users_guest_created_8f1de0_brin'),
        ),
    ]
